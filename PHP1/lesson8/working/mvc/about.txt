Есть синтаксис - это как писать на ЯП, чтобы программа заработала(нельзя допускать опечатки и т.д.)
Есть стандарты - они более мягкие (рекомендации), задают условия как писать правильно, общепонятно
Есть архитектура


Архитектура - это базовая организация системы,
воплощенная в ее компонентах, их отношениях между собой и с окружением,
а также принципы, определяющие проектирование и развитие системы. [IEEE 1471].

Если "по-русски" архитектура отвечает на 3 вопроса:
- Компоненты кода ("на какие части разбить код")
- Структура кода ("где что будет лежать")
- Отношения между компонентами.

Паттерны проектирования - "шаблоны" построения программы это некий алгоритм, следуя которым, можно
получить удовлетворительный результат.

пожалуй, главный паттерн - MVC - пожалуй самый применимый, в том числе и в ВЕБ программировании.
MVC - делит программу на 3 части:
- MODEL (код, работающий с данными). Ее задача - дать нужные данные тем компонентам,
    которые их запрашивают
    Модель и только Модель, знает, где данные находятся, как они организованы. Что они лежат
    в базе. что у базы есть пароль. Другим компонентам это знать не нужно.
    Другие части ситемы только делают запросы к модели (вызывают методы).
    Берут объект или класс вызывают его методы и этот объеке возвращает нужные данные.
    Модель и только модель умеет обновлять, вставлять или удалять данные. CRUD
    Модель ничего не выводит пользователю, модель никогда не работает напрямую с пользователем.
    У модели есть только методы для CRUD
    Модель часть программы - набор классов, объектов, может быть функций,
    может конфигурационных файлов (что Вы логически выделяете в нечто-что Вы выделяете в Модель)

- VIEW (код формирущий представление) Формирует ответ на запрос клиента.
    Например показывает полученные данные через шаблоны
    В представлении и только в представлении мы используем HTML, CSS, JS (В других частях программы этого быть не должно)
    Представление может содержать логику, нужную для вывода данных, и она может быть написана на PHP
    Нормально смешивать PHP и HTML.

- CONTROLLER - точка входа и логика приложения.
    (код, обрабатывающий запрос от клиента и выполняющий бизнес логику приложения)
    Контроллер принимает запрос от клиента (является точкой входа)
    Только контролер работает с данными от пользователя (GEET, POST, FILES не должны просачиваться в Модель или Представление)
        Получает нужные данные от моделей или дает моделям команды на модификацию данных
    Обрабатывает эти данные в соответствии с бизнес-логикой.
    Передает данные Представлению и инициирует ответ пользователю.
    Контроллер и точка входа и некое связующее звено, объединяющее программу воедино.
    