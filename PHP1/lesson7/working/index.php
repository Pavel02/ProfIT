<html>
<head>
    <title> Урок 7.  Работа с БД </title>
</head>
<body>
<?php
    //БД - совокупность хранимых данных
    //СУБД - система управления этими данными
    //Данные можно хранить в обычном текстовом файле. формат CSV позволяет хранить таблицы в обычном текстовом файле
    //у текстового файла ОГРОМНЫЙ недостаток - очень тяжело в них искать выборки (искать данные)
    //СУБД - для хранения данных, для быстрого доступа к нужным данным, для сложных операций с данными CRUD
    //БД много, но в подавляющем большинстве РЕЛЯЦИОННЫЕ БД
    //БД это серверное приложение, у нее нет интерфейса, чтобы эту БД посмотреть. Работает незаметно, висит в памяти.
    //РЕЛЯЦИОНЫЕ БД 1.Все данные хранятся в таблицах
    // 2. Каждая строка таблицы - это ЗАПИСЬ
    // 3. Столбцы таблицы - это ПОЛЯ. абсолютно все поля имеют ТИП
    // 4. Данные в разных таблицах могут и должны быть связаны ВНЕШНИМИ КЛЮЧАМИ
    // Рекомендация при создании БД выбирать сравнение utf8_general_ci

    // INSERT INTO persons (firstName, lastName, age) VALUES ('Иван', 'Иванов', 42)  //ВСТАВКА

    // DELETE FROM persons //Отсутствие конкретного условия выборки - удалит ВСЕ записи из таблицы
    // DELETE FROM persons WHERE id=2   //Удалит строку где id=2
    // Номера записей, которые были удалены, больше использоваться не будут. Это учень умно на самом деле
    // это и есть serial - берется последний номер, после последнего, использованного ранее когда либо

    // UPDATE persons SET lastName='Петренко'   //Если без условия, то все люди переименуются в Петренко
    // UPDATE persons SET lastName='Петренко' WHERE id=3

    // SELECT * FROM persons
    // SELECT lastName, age FROM persons
    // SELECT lastName, age FROM persons WHERE age > 20
    // SELECT * FROM persons WHERE age > 20 AND firstName='Екатерина"
    // SELECT * FROM persons WHERE age > 20 ORDER BY age  //В БД порядок не гарантирован (если он нужен то задаем его явно)
    // SELECT * FROM persons WHERE age > 20 ORDER BY age DESC   //Отсортировать по возрасту в обратном порядке

    $dsn = 'mysql:host=127.0.0.1;dbname=test';
//    echo $dsn;                          //Зачем строковые литералы выносить в отдельную переменную? В целях отладки Вам может захотеться посмотреть, что там.
    $dbh = new PDO($dsn, 'root', '');   //Переменная dbh будет ялвяться созданым подключением к БД
    //создаем новый объект специального класса PDO (Php Data Objects - этот класс доступен всегда)
//    var_dump($dbh);
    $sth = $dbh->prepare('SELECT * FROM persons');  //метод объекта готовит к выполнению запрос //вернет подготовленный запрос
//    var_dump($sth);
    $sth->execute();        //выполнение ранее подготовленного запроса

    $data = $sth->fetchAll();   //получаем данные, которые вернула нам БД
    var_dump($data);






?>
</body>
</html>